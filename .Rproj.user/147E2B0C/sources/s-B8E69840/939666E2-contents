# Define UI for application that draws a histogram
ui <- fluidPage(
   
   # Application title
   titlePanel("Old Faithful Geyser Data"),
   
   # Sidebar with a slider input for number of bins 
   sidebarLayout(
      sidebarPanel(
         sliderInput("bins",
                     "Number of bins:",
                     min = 1,
                     max = 50,
                     value = 30)
      ),
      
      # Show a plot of the generated distribution
      mainPanel(
         plotOutput("distPlot")
      )
   )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
   
   output$distPlot <- renderPlot({
      # generate bins based on input$bins from ui.R
      x    <- faithful[, 2] 
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      
      # draw the histogram with the specified number of bins
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
   })
}










  
  #1 output$Dataset: CSV file upload and dataframe visulization
  # output$Dataset <- DT:: renderDataTable({
  #   file <- input$file1
  #   req(file) # Ensure file is available for upcomming operations
  #   # myData = read.csv(file$datapath)
  #   # myData()
  #   myData <- DT::datatable({
  #     read.csv(file$datapath)
  #   },
  #   extensions = 'Scroller',
  #   # extensions = c('Buttons', 'Scroller'),
  #   options = list(
  #     scroller = TRUE,
  #     deferRender = TRUE,
  #     scrollY = 400,
  #     pageLength = 10,
  #     dom = 'tB'
  #     # buttons = c('csv', 'pdf')
  #   ),
  #   fillContainer = T,
  #   class = "display"
  #   )
  #   # head(read.csv(file$datapath), input$n)
  # })
  #2