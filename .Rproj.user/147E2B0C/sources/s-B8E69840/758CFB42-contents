# 
# server <- function(input, output) {
#   output$distPlot <- renderPlot({
#     hist(rnorm(input$obs), col = 'darkgray', border = 'white')
#   })
# }

shinyServer(function(input, output, session){
  readData <- reactive({
    inFile <- input$file1
    if (is.null(input$file1)){return(NULL)}
    req(file)
    read.csv(inFile$datapath)
    # read.csv(inFile$datapath, header=input$header, sep=input$sep, 
    #          quote=input$quote)
  })
  
  # # fileUpload: A function for CSV file upload 
  # fileUpload <- function(){
  #   original_df <- input$file1
  #   return(input$file1)
  # }
  # # readData: A reactive function for reading csv file and returns dataframe
  # readData <- reactive({
  #   file = fileUpload()
  #   req(file)
  #   df = read.csv(file$datapath)
  #   return(df)
  # })
  # df <- readData()
  # dataFrameInfo <- reactive({
  # })
  # output$Dataset: Helps to dispaly the dataframe on Webpage.
  output$Dataset <- renderDataTable(head(readData(), input$n),
      extensions = 'Scroller',
      options = list(
        scroller = TRUE,
        deferRender = TRUE,
        scrollY = 400,
        pageLength = 10,
        dom = 'tB'
      ),
      fillContainer = T,
      class = "display"
  )
  
  # data_types <- function(frame) {
  #   res <- lapply(frame, class)
  #   res_frame <- data.frame(unlist(res))
  #   barplot(table(res_frame), main="Data Types", col="steelblue", ylab="Number of Features")
  # }
  # print(data_types(readData()))
  # output$Dataset <- DT::renderDataTable({
  #   myData <- DT::datatable({
  #     df <- readData()
  #   },
  #   extensions = 'Scroller',
  #   options = list(
  #     scroller = TRUE,
  #     deferRender = TRUE,
  #     scrollY = 400,
  #     pageLength = 10,
  #     dom = 'tB'
  #   ),
  #   fillContainer = T,
  #   class = "display"
  #   )
  # })
  
  # Summary
  output$summary <- renderPrint({
    summary(readData())
  })
  
  output$bar <- renderPlot({
    vis_miss(readData())
  })
  
  # NA Counts
  # output$nullvalues <- renderPrint({
  #   df <- readData()
  #   nullData <- lapply(df,function(x) { length(which(is.na(x)))})
  #   print(nullData)
  # })
  
})
  
  # dat <- reactive({
  #   switch(input$dataset,
  #          m = mtcars,
  #          p = pressure)
  #   
  # })
  # 
  # output$table <- renderTable({
  #   head(dat(), input$n)
  # })
  # 
  # output$summary <- renderPrint({
  #   summary(reada)
  # })